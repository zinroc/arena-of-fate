module.exports = function (knex) {

    var Promise = Promise || require ("bluebird");

    this.knex = knex;

    return {
        /**
        * Return promise to array
        */
        getArenas: function () {
           
            return knex("arenas").select("*").orderBy("capacity", "desc").then(function (rows) {
           
                return rows;
            });
        },
        acceptReward: function (reward_id){
            return knex("record_holders")
            .where("id", reward_id)
            .update("status", "accepted");
        },
        /**
        *   Get all arena_records linked with record_holder entry for a given fighter 
        *   INT fighter_id from fighters table
        */
        getFighterRecords: function (fighter_id){
            var arenaRecords = [];
            return knex("arena_records").select("*").whereIn("arena_records.id", function () {
                this.select("record").from("record_holders").where("holder", fighter_id);
            })
            .andWhere("arena_records.name", "attendance")
            .rightOuterJoin("record_holders", "arena_records.id", "record_holders.record").where("holder", fighter_id)
            .then(function (arenaRecordsArr){
                arenaRecords = arenaRecordsArr;
                if (!arenaRecords.length){
                    //fighter holds no records
                    return false;
                } else {
                    return arenaRecords;
                }
            })
        },
        /**
        *   Return promise to array
        *   Get all of the arena records for given timestep
        *   Also adds the id of the record hodlers for those arena records
        *   INT timestep from game_state table
        */
        getRecords: function (timestep) {
            var attendanceRecords = [];
            var recordHolders = [];
            var result = [];
            return knex("arena_records")
            .select("*")
            .where("timestep", timestep)
            .andWhere("name", "attendance")
            .orderBy("arena")
            .then(function (rows){
                attendanceRecords = rows;
                var inArr = [];
                if (rows.length > 0){
                    for (var i=0; i<rows.length; i++){
                        inArr[i] = rows[i].id;
                    }
                    return knex("record_holders")
                    .select("*")
                    .whereIn("record", inArr)
                    .orderBy("record", "desc");
                } else {
                    return null;
                }
            }).then(function (rows){
                if (!rows){
                    return null;
                } else {
                    recordHolders = rows; 
                    for (var i=0; i<attendanceRecords.length; i++){
                        result[i] = attendanceRecords[i];
                        for (var j=0; j<recordHolders.length; j++){
                            if (attendanceRecords[i].id===recordHolders[j].record){
                                if (!result[i].hasOwnProperty("fighter_1")){
                                    result[i].fighter_1 = recordHolders[j].holder;
                                } else {
                                    result[i].fighter_2 = recordHolders[j].holder;
                                }
                            }
                        }
                    }
                    return result;
                }
            });
        },
        /**
         * Return a promise which resolves to the arena object
         */
        read: function (arenaID) {
            return knex("arenas").select("*").where("id", arenaID)
            .then(function (rows) {
                if (rows.length > 0) {
                    return rows[0];
                } else {
                    return null;
                }
            });
        }
    };
};
