var Promise = Promise || require("bluebird");

module.exports = function (knex) {

    /**
     * Insert the given spectator into table
     * Return promise to insert ID
     */
    this.create = function (spectator) {
        return knex("spectators").insert(spectator)
        .returning("id").then(function (idArray) {
            return idArray[0];
        });
    };
    /**
     * Insert the given array of spectators
     * Return promise which resolves to array of spectator IDs
     */
    this.createMany = function (spectatorArray) {
        return knex("spectators")
        .returning("id")
        .insert(spectatorArray);
    };

    /**
     * Update all spectator prefs given an array of spectator prefs
     * Return a promise, which automatically handles commit and rollback
     */
    this.updateManyPrefs = function (prefArray) {
        return knex.transaction(function (trx) {
            var promises = [], prefObj;
            for (var i = 0; i < prefArray.length; i++) {
                prefObj = prefArray[i];
                promises[i] = knex("spectator_prefs")
                    .transacting(trx)
                    .where({ "spectator_id": prefObj.spectator_id, "fighter_id": prefObj.fighter_id })
                    .update("pref", prefObj.pref);
            }
            return Promise.all(promises);
        });
    };

    this.read = function (spectatorID) {
        return knex("spectators").select("*").where("id", spectatorID).then(function (rows) {
            if (rows.length > 0) {
                return rows[0];
            } else {
                return null;
            }
        });
    };

    this.readAll = function () {
        return knex("spectators").select("*").then(function (rows) {
            return rows;
        });
    };

    this.getSpectatorsInArena = function (arenaID) {
        return knex("spectators").select("*").where("home_arena", arenaID).then(function (rows){
            return rows;
        })
    };

    this.update = function (spectator) {
        return knex("spectators").where("id", spectator.id).update(spectator).then(function (r) {
            return r;
        });
    };

    this.delete = function (spectatorID) {
        return knex("spectators").where("id", spectatorID).del().then(function (r) {
            return r;
        });
    };

    /**
     * Initialize preferences for all spectators for the given fighter, return a promise
     * Promise resolves to array of preferences for the given fighter
     */
    this.createSpectatorPrefs = function (fighterID) {
        var prefs = [];
        return this.readAll()
        .then(function (crowdArray) {
            for (var i = 0; i < crowdArray.length; i++) {
                prefs[i] = {
                    spectator_id: crowdArray[i].id,
                    fighter_id: fighterID,
                    pref: 0
                };
            }
            return prefs;
        })
        .then(function (prefArray) {
            return knex("spectator_prefs").insert(prefArray).then(function (r) {
                return prefs;
            });
        });
    };

    /**
     * Return the preferences of the spectators for the given fighter, as a promise
     * Only return preferences from the spectators at the given arena
     * Sort in order of spectator_id
     */
    this.getSpectatorPrefs = function (fighterID, arenaID) {
        return knex("spectator_prefs")
        .select("spectator_id", "fighter_id", "home_arena", "pref")
        .where({ "fighter_id": fighterID, "home_arena": arenaID })
        .innerJoin("spectators", "spectators.id", "spectator_prefs.spectator_id")
        .orderBy("spectator_id", "desc")
        .then(function (rows) {
            return rows;
        });
    };

    /**
     * Do the same thing as getSpectatorPrefs, except create the prefs if they don't exist
     */
    this.getAndCreateSpectatorPrefs = function (fighterID, arenaID) {
        var that = this;
        return that.getSpectatorPrefs(fighterID, arenaID)
        .then(function (prefArray) {
            if (prefArray.length === 0) {
                // must create
                return that.createSpectatorPrefs (fighterID).then(function (prefs) {
                    return []; // signal to re-fetch
                });
            } else {
                return prefArray;
            }
        })
        .then(function (prefArray) {
            if (prefArray.length === 0) {
                return that.getSpectatorPrefs(fighterID, arenaID).then(function (prefs) {
                    return prefs;
                });
            } else {
                return prefArray;
            }
        });
    };

    return this;
};
