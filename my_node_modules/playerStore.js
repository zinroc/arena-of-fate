var Promise = Promise || require("bluebird");

/**
 * Interacts with player state
 * Requires knex when loaded
 */
module.exports = function (knex) {
    this.knex = knex;
    var startingMoney = 5000;
    var startingFame = 1000;

    return {
        /**
        * Returns a promise, which returns an object (or null on failure)
        */
        get: function (email) {
            return knex("players").where("email", email).select("*").then(function (rows) {
                if (rows.length === 0) {
                    return null;
                } else {
                    return rows[0];
                }
            });
        },
        /**
        * Returns a promise
        */
        update: function (email, playerState) {
            // do not allow playerState to modify email
            delete playerState.email;
            return knex("players").where("email", email)
            .update(playerState)
            .then(function (r) {
                return r;
            });
        },
        /**
         * Return promise, and promise returns ID
         * Cannot give whole player object, can give only `name` and `email`
         */
        create: function (name, email) {
            var player = {
                email: email,
                name: name,
                money: startingMoney,
                num_fights: 0,
                fame: startingFame
            };
            return knex("players").insert(player).returning("id")
            .then(function (r) {
                return r[0];
            });
        },
        /**
        * Returns a promise
        */
        delete: function (email) {
            return knex("players").where("email", email).del().then(function (r) {
                return r;
            });
        },
        /**
         * Return rankings of players by fame
         * Return name, fame only
         * Return promise to an array of players
         */
        getFameRankings: function () {
            return knex("players").select("id", "name", "fame")
                .orderBy("fame", "desc").limit(10);
        },
        /**
         * Return rankings of players by money
         * Return name, money only
         * Return promise to an array of players
         */
        getMoneyRankings: function () {
            return knex("players").select("id", "name", "money")
                .orderBy("money", "desc").limit(10);
        }
    };
};
